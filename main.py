#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '–ö–∞–ª–ª' –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
–∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Ñ—Ä–∞–∑–æ–π '–°–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö'.
"""

import logging
import os
import random
from telegram import Update, Chat, ParseMode
from telegram.ext import Application, MessageHandler, CommandHandler, ContextTypes, filters
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
API_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", '7223856263:AAHTo0KHmi-i0NstCJNA5WymvUaFMoLKKsM')

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
CALL_MESSAGES = [
    "üö® *–í–Ω–∏–º–∞–Ω–∏–µ\!* –í—Å–µ —Å—é–¥–∞\! üö®",
    "üîä *–í—Å–µ–º —Å–æ–±—Ä–∞—Ç—å—Å—è\!* üì£",
    "üì¢ *–°—Ä–æ—á–Ω—ã–π —Å–±–æ—Ä\!* ‚ö°",
    "üîî *–û–±—â–∏–π —Å–±–æ—Ä\!* üÜò",
    "üéØ *–°–æ–∑—ã–≤–∞—é –≤—Å–µ—Ö\!* üéØ"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text('üëã *–ü—Ä–∏–≤–µ—Ç\!* –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "*–ö–∞–ª–ª*" ü§ñ', 
                                   parse_mode=ParseMode.MARKDOWN_V2)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        'üìã *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:*\n\n'
        '‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "*–ö–∞–ª–ª*" –¥–ª—è —Å–æ–∑—ã–≤–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
        '‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "*–ö–∞–ª–ª \[—Ç–µ–∫—Å—Ç\]*" –¥–ª—è —Å–æ–∑—ã–≤–∞ —Å –≤–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n'
        '‚Ä¢ –°–ª–æ–≤–æ "*–∫–∞–ª–ª*" –≤ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞'
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN_V2)

async def get_all_members(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        chat = await context.bot.get_chat(chat_id)
        
        if chat.type == Chat.PRIVATE:
            # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ (—ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        admins = await context.bot.get_chat_administrators(chat_id)
        members = [member.user for member in admins if not member.user.is_bot]
        
        return members
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {e}")
        return []

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.
    """
    text = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    async def get_mentions():
        members = await get_all_members(context, update.effective_chat.id)
        mentions = [f"@{member.username}" for member in members if member.username]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ username, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –ø–æ –∏–º–µ–Ω–∏
        for member in members:
            if not member.username:
                name = member.first_name
                if member.last_name:
                    name += f" {member.last_name}"
                mentions.append(name)
                
        return mentions, members

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–ö–∞–ª–ª"
    if text.lower() == "–∫–∞–ª–ª":
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        mentions, members = await get_mentions()
        
        if members:
            mention_text = ", ".join(mentions)
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            call_message = random.choice(CALL_MESSAGES)
            response = f"{'‚ûñ'*10}\n{call_message}\n\nüë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n{mention_text}\n{'‚ûñ'*10}"
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await update.message.reply_text("‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\.* üòî", 
                                          parse_mode=ParseMode.MARKDOWN_V2)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω "–ö–∞–ª–ª [—Ç–µ–∫—Å—Ç]"
    elif text.lower().startswith("–∫–∞–ª–ª ") and len(text) > 5:
        additional_text = text[5:]  # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ö–∞–ª–ª "
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º: {additional_text}")
        
        mentions, members = await get_mentions()
        
        if members:
            mention_text = ", ".join(mentions)
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –≤ additional_text
            escaped_text = additional_text.replace(".", "\\.").replace("-", "\\-").replace("!", "\\!").replace("(", "\\(").replace(")", "\\)")
            response = (f"{'‚ûñ'*10}\n"
                       f"üì¢ *–ü—Ä–∏–∑—ã–≤:* _{escaped_text}_\n\n"
                       f"üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n{mention_text}\n"
                       f"{'‚ûñ'*10}")
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await update.message.reply_text(f"‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞\.* üòî\n\n"
                                         f"_–¢–µ–∫—Å—Ç –ø—Ä–∏–∑—ã–≤–∞:_ {additional_text}", 
                                         parse_mode=ParseMode.MARKDOWN_V2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    elif "–∫–∞–ª–ª" in text.lower():
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text}")
        await update.message.reply_text('üì¢ üîä *–°–æ–∑—ã–≤–∞—é –≤—Å–µ—Ö\!* –í–Ω–∏–º–∞–Ω–∏–µ, —Å—Ä–æ—á–Ω—ã–π —Å–±–æ—Ä\! üö® üî•', 
                                      parse_mode=ParseMode.MARKDOWN_V2)
    else:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(API_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–æ –Ω–∞–∂–∞—Ç–∏—è Ctrl-C
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
