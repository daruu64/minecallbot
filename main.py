#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '–ö–∞–ª–ª' –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
–∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Ñ—Ä–∞–∑–æ–π '–°–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö'.
"""

import logging
import os
import random
import html
from telegram import Update, Chat
from telegram.ext import Application, MessageHandler, CommandHandler, ContextTypes, filters
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è)
API_TOKEN = '7223856263:AAHTo0KHmi-i0NstCJNA5WymvUaFMoLKKsM'

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
CALL_MESSAGES = [
    "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –°—Ä–æ—á–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! üö®",
    "üì¢ üîä <b>–°–æ–∑—ã–≤–∞—é –≤—Å–µ—Ö!</b> –í–Ω–∏–º–∞–Ω–∏–µ, —Å—Ä–æ—á–Ω—ã–π —Å–±–æ—Ä! üî•",
    "‚ö°Ô∏è <b>–í—Å–µ–º —Å–æ–±—Ä–∞—Ç—å—Å—è!</b> –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚ö°Ô∏è",
    "üéØ <b>–û–±—â–∏–π —Å–±–æ—Ä!</b> –í—Å–µ –Ω–∞ —Å–≤—è–∑—å! üì°",
    "üîî <b>–¢—Ä–µ–≤–æ–≥–∞!</b> –í—Å–µ –≤ —á–∞—Ç! üîî"
]

CALL_WITH_TEXT_TEMPLATES = [
    "üì£ <b>–û–ë–™–Ø–í–õ–ï–ù–ò–ï:</b> <i>{additional_text}</i> üì£\n\nüë• {mention_text}",
    "üö© <b>–í–ê–ñ–ù–û:</b> <i>{additional_text}</i> üö©\n\nüëã {mention_text}",
    "üéôÔ∏è <b>–ü–†–ò–ó–´–í:</b> <i>{additional_text}</i> üéôÔ∏è\n\n‚≠êÔ∏è {mention_text}",
    "üìå <b>–°–û–û–ë–©–ï–ù–ò–ï:</b> <i>{additional_text}</i> üìå\n\nüëá {mention_text}",
    "üî• <b>–°–†–û–ß–ù–û:</b> <i>{additional_text}</i> üî•\n\nüëÄ {mention_text}"
]

CALL_MENTION_TEMPLATES = [
    "üîî <b>–°–æ–∑—ã–≤–∞—é –≤—Å–µ—Ö:</b> {mention_text} üëã",
    "üì¢ <b>–í–Ω–∏–º–∞–Ω–∏–µ! –í—Å–µ —Å—é–¥–∞:</b> {mention_text} ‚ö°Ô∏è",
    "üö® <b>–û–±—â–∏–π —Å–±–æ—Ä:</b> {mention_text} üî•",
    "üì£ <b>–í—Å–µ–º —è–≤–∏—Ç—å—Å—è:</b> {mention_text} üéØ",
    "‚≠êÔ∏è <b>–í—ã–∑—ã–≤–∞—é—Ç—Å—è:</b> {mention_text} üìå"
]

SEPARATOR = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text('üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "–ö–∞–ª–ª" üîç', parse_mode="HTML")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        'üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n'
        '‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "–ö–∞–ª–ª" –¥–ª—è —Å–æ–∑—ã–≤–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üì¢\n'
        '‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "–ö–∞–ª–ª [—Ç–µ–∫—Å—Ç]" –¥–ª—è —Å–æ–∑—ã–≤–∞ —Å –≤–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù\n'
        '‚Ä¢ –°–ª–æ–≤–æ "–∫–∞–ª–ª" –≤ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ üîç'
    )
    await update.message.reply_text(help_text, parse_mode="HTML")

async def get_all_members(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        chat = await context.bot.get_chat(chat_id)
        
        if chat.type == Chat.PRIVATE:
            # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ (—ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        admins = await context.bot.get_chat_administrators(chat_id)
        members = []
        for member in admins:
            if not member.user.is_bot:
                if member.user.username:
                    members.append(f"@{member.user.username}")
                else:
                    members.append(f"<a href='tg://user?id={member.user.id}'>{html.escape(member.user.first_name)}</a>")
        
        return members
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {e}")
        return []

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.
    """
    chat_id = update.effective_chat.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–ö–∞–ª–ª"
    if text.lower() == "–∫–∞–ª–ª":
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        mentions = await get_all_members(context, chat_id)
        
        if mentions:
            mention_text = ", ".join(mentions)
            response = f"{SEPARATOR}{random.choice(CALL_MENTION_TEMPLATES).format(mention_text=mention_text)}{SEPARATOR}"
            await update.message.reply_text(response, parse_mode="HTML")
        else:
            await update.message.reply_text("‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.</b> ‚ö†Ô∏è", parse_mode="HTML")
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω "–ö–∞–ª–ª [—Ç–µ–∫—Å—Ç]"
    elif text.lower().startswith("–∫–∞–ª–ª ") and len(text) > 5:
        additional_text = text[5:]  # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ö–∞–ª–ª "
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º: {additional_text}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        mentions = await get_all_members(context, chat_id)
        
        if mentions:
            mention_text = ", ".join(mentions)
            template = random.choice(CALL_WITH_TEXT_TEMPLATES)
            response = f"{SEPARATOR}{template.format(additional_text=additional_text, mention_text=mention_text)}{SEPARATOR}"
            await update.message.reply_text(response, parse_mode="HTML")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:</b> <i>{additional_text}</i> ‚ö†Ô∏è", parse_mode="HTML")
    
    elif "–∫–∞–ª–ª" in text.lower():
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {text}")
        response = f"{SEPARATOR}{random.choice(CALL_MESSAGES)}{SEPARATOR}"
        await update.message.reply_text(response, parse_mode="HTML")
    else:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(API_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–æ –Ω–∞–∂–∞—Ç–∏—è Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
